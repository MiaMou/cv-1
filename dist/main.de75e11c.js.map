{"version":3,"sources":["main.js"],"names":["html","document","querySelector","style","string","string2","n","step","setTimeout","innerHTML","substring","window","scrollTo","length"],"mappings":";AACA,IAAIA,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,UAI/BE,EAAJ,ujCA+CIC,EAAU,GAEVC,EAAI,EAaJC,EAAO,SAAPA,IAEAC,WAAW,WACU,OAAdJ,EAAOE,GAEND,GAAW,QACS,MAAdD,EAAOE,GACbD,GAAW,SAKXA,GAAWD,EAAOE,GAOtBN,EAAKS,UAAYJ,EACjBF,EAAMM,UAAYL,EAAOM,UAAU,EAAGJ,GAEtCK,OAAOC,SAAS,EAAG,OACnBZ,EAAKY,SAAS,EAAG,OAEdN,EAAIF,EAAOS,OAAO,IAEjBP,GAAK,EACLC,MAEL,KAEPA","file":"main.de75e11c.js","sourceRoot":"../src","sourcesContent":["// 使用API获取demo 和 style 分别放html 和css\nlet html = document.querySelector('#html')\nlet style = document.querySelector('#style')\n\n// 往demo里写内容  // demo.innerHTML = 1\n// string 是用来保存我们要展示的结果的       // 不加注释会影响css\nlet string = `/* 你好，我叫Mia\n * 接下来我演示一下我的前端功底\n * 首先我要准备一个div \n */\n#div1 {\n    border: 1px solid red;\n    width: 200px;\n    height: 200px;\n}\n/* 接下来我把 div 变成一个八卦图\n * 注意看好了\n * 首先，把 div 变成一个圆\n */\n#div1 {\n    border-radius: 50%;\n    box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);\n    border: none;\n}\n/* 八卦是阴阳形成的\n * 一黑一白\n*/\n#div1 {\n    background: linear-gradient(90deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 50%, rgba(0,0,0,1) 50%, rgba(0,0,0,1) 100%);\n}\n/* 加两个风火轮 */\n#div1::before {\n    width: 100px;\n    height: 100px;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    background: #000;\n    border-radius: 50%;\n    background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 25%, rgba(0,0,0,1) 25%, rgba(0,0,0,1) 100%);\n}\n#div1::after {\n    width: 100px;\n    height: 100px;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    background: #fff;\n    border-radius: 50%;\n    background: radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(0,0,0,1) 25%, rgba(255,255,255,1) 25%, rgba(255,255,255,1) 100%);   \n}\n`\n// string2 是用来缓存我们要显示到屏幕上的结果的\nlet string2 = ''\n// 从0开始可以做 数组 或 字符串 下标\nlet n = 0\n\n// substring(0, n) 显示 string 的 第0个--第n-1个\n// demo.innerHTML = string.substring(0, n)\n\n// 把js中的回车变成html里的回车，因为我们是在html里写内容\n// string = string.replace(\"\\n\", \"<br>\")\n// 但是不成功，因为replace只会把第一个回车变了，后面的回车不变，所以我们可以用正则表达式,就可以把所有回车变成功\n// string = string.replace(\"/\\n/g\", \"<br>\")\n// 但是又有问题，因为字是一个一个打的，所以会看到 < 这个尖括号闪现\n// 所以要重新想别的方法\n\n\nlet step = () => {\n    // step()目的是0.1s后 把n加1 并显示到页面 再调step()     //setTimeout()让字是移动变化的\n    setTimeout(() => { \n        if(string[n] === \"\\n\") {\n            // 如果当前的字符是回车，就加回车，不会出现多余的尖括号\n            string2 += \"</br>\"\n        } else if(string[n] === \" \") {\n            string2 += \"&nbsp;\"\n        }else {\n            // 之前demo.innerHTML = string.substring(0, n) 是直接显示到页面里，现在不这样\n            // 而是第0次把第0个字符加进来，第1次把第一个加进string2……每次把string的东西搬过来\n            // 如果当前字符不是回车 就照搬\n            string2 += string[n]\n        }\n\n        // // 上面代码如果只有一个if...else..可以优化成三元表达式\n        // string2 += string[n] === \"\\n\" ? \"<br>\" : string[n]\n\n        // 然后将 string2 写进html就好了,  同时让css生效\n        html.innerHTML = string2\n        style.innerHTML = string.substring(0, n)\n        // js设置滚动条\n        window.scrollTo(0, 99999)\n        html.scrollTo(0, 99999)\n\n        if(n < string.length-1) {\n            // 如果n不是最后一个就继续，到了就停止\n            n += 1\n            step()\n        }             \n    }, 50)    \n}\nstep();\n"]}